{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/jwtauthmanager\/init(authstatestorage:)","title":"init(authStateStorage: AuthStateStorage)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/jwtauthmanager\/loadauthtoken()","title":"func loadAuthToken() -> String?","type":"method"},{"path":"\/documentation\/lightsparkwallet\/jwtauthmanager\/login(accountid:secret:baseurlstring:additionalhttpheaders:completion:)","title":"func login(accountID: String, secret: String, baseURLString: String?, additionalHttpHeaders: [AnyHashable : Any], completion: (String?, Error?) -> Void)","type":"method"}],"path":"\/documentation\/lightsparkwallet\/jwtauthmanager","title":"JWTAuthManager","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/requester\/init(authorization:baseurlstring:httpadditionalheaders:)","title":"init(authorization: String, baseURLString: String?, httpAdditionalHeaders: [AnyHashable : Any]?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/requester\/executegraphqloperation(operation:variables:signingkey:)","title":"func executeGraphQLOperation(operation: String, variables: [AnyHashable : Any?], signingKey: SecKey?) async throws -> Data","type":"method"},{"path":"\/documentation\/lightsparkwallet\/requester\/executegraphqloperation(operation:variables:signingkey:completion:)","title":"func executeGraphQLOperation(operation: String, variables: [AnyHashable : Any?], signingKey: SecKey?, completion: (Data?, Error?) -> Void)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/requester\/executegraphqloperationpublisher(operation:variables:signingkey:)","title":"func executeGraphQLOperationPublisher(operation: String, variables: [AnyHashable : Any?], signingKey: SecKey?) -> AnyPublisher<Data, Error>","type":"method"}],"path":"\/documentation\/lightsparkwallet\/requester","title":"Requester","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactionstatuslistener\/init(client:id:)","title":"init(client: WalletClient, id: String) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactionstatuslistener\/status","title":"var status: TransactionStatusListenerResult?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactionstatuslistener\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/lightsparkwallet\/transactionstatuslistener\/start()","title":"func start()","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactionstatuslistener\/transactionstatuslistenererror\/typenotsupported","title":"case typeNotSupported","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactionstatuslistener\/transactionstatuslistenererror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lightsparkwallet\/transactionstatuslistener\/transactionstatuslistenererror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactionstatuslistener\/transactionstatuslistenererror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/transactionstatuslistener\/transactionstatuslistenererror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/transactionstatuslistener\/transactionstatuslistenererror","title":"TransactionStatusListener.TransactionStatusListenerError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactionstatuslistener\/transactionstatuslistenerresult\/fail(_:)","title":"case fail(Error)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactionstatuslistener\/transactionstatuslistenerresult\/success(_:)","title":"case success(TransactionStatus)","type":"case"}],"path":"\/documentation\/lightsparkwallet\/transactionstatuslistener\/transactionstatuslistenerresult","title":"TransactionStatusListener.TransactionStatusListenerResult","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactionstatuslistener\/objectwillchange","title":"var objectWillChange: ObservableObjectPublisher","type":"property"}],"path":"\/documentation\/lightsparkwallet\/transactionstatuslistener\/observableobject-implementations","title":"ObservableObject Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/transactionstatuslistener","title":"TransactionStatusListener","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/userdefaultauthstorage\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/userdefaultauthstorage\/deleteauthstatedata()","title":"func deleteAuthStateData()","type":"method"},{"path":"\/documentation\/lightsparkwallet\/userdefaultauthstorage\/getauthstatedata()","title":"func getAuthStateData() -> Data?","type":"method"},{"path":"\/documentation\/lightsparkwallet\/userdefaultauthstorage\/storeauthstatedata(data:)","title":"func storeAuthStateData(data: Data)","type":"method"}],"path":"\/documentation\/lightsparkwallet\/userdefaultauthstorage","title":"UserDefaultAuthStorage","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/init(accesstoken:baseurlstring:httpadditionalheaders:)","title":"init(accessToken: String, baseURLString: String?, httpAdditionalHeaders: [AnyHashable : Any]?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/bitcoinfeeestimate()","title":"func bitcoinFeeEstimate() async throws -> FeeEstimate","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/bitcoinfeeestimate(completion:)","title":"func bitcoinFeeEstimate(completion: (FeeEstimate?, Error?) -> Void)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/bitcoinfeeestimatepublisher()","title":"func bitcoinFeeEstimatePublisher() -> AnyPublisher<FeeEstimate, Error>","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/createbitcoinfundingaddress()","title":"func createBitcoinFundingAddress() async throws -> CreateBitcoinFundingAddressOutput","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/createbitcoinfundingaddress(completion:)","title":"func createBitcoinFundingAddress(completion: (CreateBitcoinFundingAddressOutput?, Error?) -> Void)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/createbitcoinfundingaddresspublisher()","title":"func createBitcoinFundingAddressPublisher() -> AnyPublisher<CreateBitcoinFundingAddressOutput, Error>","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/createinvoice(amountmsats:memo:invoicetype:)","title":"func createInvoice(amountMSats: Int64, memo: String?, invoiceType: InvoiceType) async throws -> CreateInvoiceOutput","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/createinvoice(amountmsats:memo:invoicetype:completion:)","title":"func createInvoice(amountMSats: Int64, memo: String?, invoiceType: InvoiceType, completion: (CreateInvoiceOutput?, Error?) -> Void)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/createinvoicepublisher(amountmsats:memo:invoicetype:)","title":"func createInvoicePublisher(amountMSats: Int64, memo: String?, invoiceType: InvoiceType) -> AnyPublisher<CreateInvoiceOutput, Error>","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/decodepaymentrequest(encodedpaymentrequest:)","title":"func decodePaymentRequest(encodedPaymentRequest: String) async throws -> InvoiceData","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/decodepaymentrequest(encodedpaymentrequest:completion:)","title":"func decodePaymentRequest(encodedPaymentRequest: String, completion: (InvoiceData?, Error?) -> Void)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/decodepaymentrequestpublisher(encodedpaymentrequest:)","title":"func decodePaymentRequestPublisher(encodedPaymentRequest: String) -> AnyPublisher<InvoiceData, Error>","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/deploywallet()","title":"func deployWallet() async throws -> DeployWalletOutput","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/deploywallet(completion:)","title":"func deployWallet(completion: (DeployWalletOutput?, Error?) -> Void)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/deploywalletpublisher()","title":"func deployWalletPublisher() -> AnyPublisher<DeployWalletOutput, Error>","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/executerequest(operation:variables:signingkey:)","title":"func executeRequest<T>(operation: String, variables: [AnyHashable : Any?], signingKey: SecKey?) async throws -> T","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/executerequest(operation:variables:signingkey:completion:)","title":"func executeRequest<T>(operation: String, variables: [AnyHashable : Any?], signingKey: SecKey?, completion: (T?, Error?) -> Void)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/executerequestpublisher(operation:variables:signingkey:)","title":"func executeRequestPublisher<T>(operation: String, variables: [AnyHashable : Any?], signingKey: SecKey?) -> AnyPublisher<T, Error>","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/fetchpaymentrequest(first:after:afterdate:beforedate:)","title":"func fetchPaymentRequest(first: Int?, after: String?, afterDate: Date?, beforeDate: Date?) async throws -> WalletToTransactionsConnection","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/fetchpaymentrequest(first:after:afterdate:beforedate:completion:)","title":"func fetchPaymentRequest(first: Int?, after: String?, afterDate: Date?, beforeDate: Date?, completion: (WalletToTransactionsConnection?, Error?) -> Void)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/fetchpaymentrequestpublisher(first:after:afterdate:beforedate:)","title":"func fetchPaymentRequestPublisher(first: Int?, after: String?, afterDate: Date?, beforeDate: Date?) -> AnyPublisher<WalletToPaymentRequestsConnection, Error>","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/fetchtransactions(first:after:afterdate:beforedate:status:types:)","title":"func fetchTransactions(first: Int?, after: String?, afterDate: Date?, beforeDate: Date?, status: [TransactionStatus]?, types: [TransactionType]?) async throws -> WalletToTransactionsConnection","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/fetchtransactions(first:after:afterdate:beforedate:status:types:completion:)","title":"func fetchTransactions(first: Int?, after: String?, afterDate: Date?, beforeDate: Date?, status: [TransactionStatus]?, types: [TransactionType]?, completion: (WalletToTransactionsConnection?, Error?) -> Void)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/fetchtransactionspublisher(first:after:afterdate:beforedate:status:types:)","title":"func fetchTransactionsPublisher(first: Int?, after: String?, afterDate: Date?, beforeDate: Date?, status: [TransactionStatus]?, types: [TransactionType]?) -> AnyPublisher<WalletToTransactionsConnection, Error>","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/getcurrentwallet()","title":"func getCurrentWallet() async throws -> Wallet","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/getcurrentwallet(completion:)","title":"func getCurrentWallet(completion: (Wallet?, Error?) -> Void)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/getcurrentwalletpublisher()","title":"func getCurrentWalletPublisher() -> AnyPublisher<Wallet, Error>","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/getentity(id:)","title":"func getEntity<T>(id: String) async throws -> T","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/getentity(id:completion:)","title":"func getEntity<T>(id: String, completion: (T?, Error?) -> Void)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/getentitypublisher(id:)","title":"func getEntityPublisher<T>(id: String) -> AnyPublisher<T, Error>","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/initializewallet(signingpublickey:privatesigningkey:)","title":"func initializeWallet(signingPublicKey: SecKey, privateSigningKey: SecKey) async throws -> InitializeWalletOutput","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/initializewallet(signingpublickey:privatesigningkey:completion:)","title":"func initializeWallet(signingPublicKey: SecKey, privateSigningKey: SecKey, completion: (InitializeWalletOutput?, Error?) -> Void)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/initializewalletpublisher(signingpublickey:privatesigningkey:)","title":"func initializeWalletPublisher(signingPublicKey: SecKey, privateSigningKey: SecKey) -> AnyPublisher<InitializeWalletOutput, Error>","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/lightningfeeestimateforinvoice(encodedpaymentrequest:amountmsats:)","title":"func lightningFeeEstimateForInvoice(encodedPaymentRequest: String, amountMSats: Int64?) async throws -> LightningFeeEstimateOutput","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/lightningfeeestimateforinvoice(encodedpaymentrequest:amountmsats:completion:)","title":"func lightningFeeEstimateForInvoice(encodedPaymentRequest: String, amountMSats: Int64?, completion: (LightningFeeEstimateOutput?, Error?) -> Void)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/lightningfeeestimateforinvoicepublisher(encodedpaymentrequest:amountmsats:)","title":"func lightningFeeEstimateForInvoicePublisher(encodedPaymentRequest: String, amountMSats: Int64?) -> AnyPublisher<LightningFeeEstimateOutput, Error>","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/lightningfeeestimatefornode(destinationpublickey:amountmsats:)","title":"func lightningFeeEstimateForNode(destinationPublicKey: String, amountMSats: Int64) async throws -> LightningFeeEstimateOutput","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/lightningfeeestimatefornode(destinationpublickey:amountmsats:completion:)","title":"func lightningFeeEstimateForNode(destinationPublicKey: String, amountMSats: Int64, completion: (LightningFeeEstimateOutput?, Error?) -> Void)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/lightningfeeestimatefornodepublisher(destinationpublickey:amountmsats:)","title":"func lightningFeeEstimateForNodePublisher(destinationPublicKey: String, amountMSats: Int64) -> AnyPublisher<LightningFeeEstimateOutput, Error>","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/payinvoice(encodedinvoice:amountmsats:maximumfeemsats:timeout:signingkey:)","title":"func payInvoice(encodedInvoice: String, amountMSats: Int64?, maximumFeeMSats: Int64, timeout: Int, signingKey: SecKey) async throws -> PayInvoiceOutput","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/payinvoice(encodedinvoice:amountmsats:maximumfeemsats:timeout:signingkey:completion:)","title":"func payInvoice(encodedInvoice: String, amountMSats: Int64?, maximumFeeMSats: Int64, timeout: Int, signingKey: SecKey, completion: (PayInvoiceOutput?, Error?) -> Void)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/payinvoicepublisher(encodedinvoice:amountmsats:maximumfeemsats:timeout:signingkey:)","title":"func payInvoicePublisher(encodedInvoice: String, amountMSats: Int64?, maximumFeeMSats: Int64, timeout: Int, signingKey: SecKey) -> AnyPublisher<PayInvoiceOutput, Error>","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/requestwithdrawal(bitcoinaddress:amountsats:signingkey:)","title":"func requestWithdrawal(bitcoinAddress: String, amountSats: Int64, signingKey: SecKey) async throws -> RequestWithdrawalOutput","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/requestwithdrawal(bitcoinaddress:amountsats:signingkey:completion:)","title":"func requestWithdrawal(bitcoinAddress: String, amountSats: Int64, signingKey: SecKey, completion: (RequestWithdrawalOutput?, Error?) -> Void)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/requestwithdrawalpublisher(bitcoinaddress:amountsats:signingkey:)","title":"func requestWithdrawalPublisher(bitcoinAddress: String, amountSats: Int64, signingKey: SecKey) -> AnyPublisher<RequestWithdrawalOutput, Error>","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/sendpayment(destinationpublickey:amountmsats:maximumfeemsats:timeout:signingkey:)","title":"func sendPayment(destinationPublicKey: String, amountMSats: Int64, maximumFeeMSats: Int64, timeout: Int, signingKey: SecKey) async throws -> PayInvoiceOutput","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/sendpayment(destinationpublickey:amountmsats:maximumfeemsats:timeout:signingkey:completion:)","title":"func sendPayment(destinationPublicKey: String, amountMSats: Int64, maximumFeeMSats: Int64, timeout: Int, signingKey: SecKey, completion: (PayInvoiceOutput?, Error?) -> Void)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/sendpaymentpublisher(destinationpublickey:amountmsats:maximumfeemsats:timeout:signingkey:)","title":"func sendPaymentPublisher(destinationPublicKey: String, amountMSats: Int64, maximumFeeMSats: Int64, timeout: Int, signingKey: SecKey) -> AnyPublisher<PayInvoiceOutput, Error>","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/terminatewallet()","title":"func terminateWallet() async throws -> TerminateWalletOutput","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/terminatewallet(completion:)","title":"func terminateWallet(completion: (TerminateWalletOutput?, Error?) -> Void)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletclient\/terminatewalletpublisher()","title":"func terminateWalletPublisher() -> AnyPublisher<TerminateWalletOutput, Error>","type":"method"}],"path":"\/documentation\/lightsparkwallet\/walletclient","title":"WalletClient","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/walletstatuslistener\/init(client:)","title":"init(client: WalletClient)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/walletstatuslistener\/status","title":"var status: WalletStatusListenerResult?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/walletstatuslistener\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/lightsparkwallet\/walletstatuslistener\/start()","title":"func start()","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/walletstatuslistener\/walletstatuslistenerresult\/fail(_:)","title":"case fail(Error)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/walletstatuslistener\/walletstatuslistenerresult\/success(_:)","title":"case success(WalletStatus)","type":"case"}],"path":"\/documentation\/lightsparkwallet\/walletstatuslistener\/walletstatuslistenerresult","title":"WalletStatusListener.WalletStatusListenerResult","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/walletstatuslistener\/objectwillchange","title":"var objectWillChange: ObservableObjectPublisher","type":"property"}],"path":"\/documentation\/lightsparkwallet\/walletstatuslistener\/observableobject-implementations","title":"ObservableObject Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/walletstatuslistener","title":"WalletStatusListener","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/authstatestorage\/deleteauthstatedata()","title":"func deleteAuthStateData()","type":"method"},{"path":"\/documentation\/lightsparkwallet\/authstatestorage\/getauthstatedata()","title":"func getAuthStateData() -> Data?","type":"method"},{"path":"\/documentation\/lightsparkwallet\/authstatestorage\/storeauthstatedata(data:)","title":"func storeAuthStateData(data: Data)","type":"method"}],"path":"\/documentation\/lightsparkwallet\/authstatestorage","title":"AuthStateStorage","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/entity\/createdat","title":"var createdAt: Date","type":"property"},{"path":"\/documentation\/lightsparkwallet\/entity\/id","title":"var id: String","type":"property"},{"path":"\/documentation\/lightsparkwallet\/entity\/updatedat","title":"var updatedAt: Date","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/entity\/fragment","title":"static var fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/entity","title":"Entity","type":"protocol"},{"path":"\/documentation\/lightsparkwallet\/lightningtransaction","title":"LightningTransaction","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/onchaintransaction\/blockhash","title":"var blockHash: String?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/onchaintransaction\/blockheight","title":"var blockHeight: Int64","type":"property"},{"path":"\/documentation\/lightsparkwallet\/onchaintransaction\/destinationaddresses","title":"var destinationAddresses: [String]","type":"property"},{"path":"\/documentation\/lightsparkwallet\/onchaintransaction\/fees","title":"var fees: CurrencyAmount?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/onchaintransaction\/numconfirmations","title":"var numConfirmations: Int64?","type":"property"}],"path":"\/documentation\/lightsparkwallet\/onchaintransaction","title":"OnChainTransaction","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentrequest\/paymentrequestdatatype","title":"PaymentRequestDataType","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentrequest\/data","title":"var data: PaymentRequestDataType","type":"property"},{"path":"\/documentation\/lightsparkwallet\/paymentrequest\/status","title":"var status: PaymentRequestStatus","type":"property"}],"path":"\/documentation\/lightsparkwallet\/paymentrequest","title":"PaymentRequest","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentrequestdata\/bitcoinnetwork","title":"var bitcoinNetwork: BitcoinNetwork","type":"property"},{"path":"\/documentation\/lightsparkwallet\/paymentrequestdata\/encodedpaymentrequest","title":"var encodedPaymentRequest: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/paymentrequestdata","title":"PaymentRequestData","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transaction\/amount","title":"var amount: CurrencyAmount","type":"property"},{"path":"\/documentation\/lightsparkwallet\/transaction\/resolvedat","title":"var resolvedAt: Date?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/transaction\/status","title":"var status: TransactionStatus","type":"property"},{"path":"\/documentation\/lightsparkwallet\/transaction\/transactionhash","title":"var transactionHash: String?","type":"property"}],"path":"\/documentation\/lightsparkwallet\/transaction","title":"Transaction","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/balances\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/balances\/availabletosendbalance","title":"var availableToSendBalance: CurrencyAmount","type":"property"},{"path":"\/documentation\/lightsparkwallet\/balances\/availabletowithdrawbalance","title":"var availableToWithdrawBalance: CurrencyAmount","type":"property"},{"path":"\/documentation\/lightsparkwallet\/balances\/ownedbalance","title":"var ownedBalance: CurrencyAmount","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/balances\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/balances","title":"Balances","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/channelclosingtransaction\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/channelclosingtransaction\/amount","title":"var amount: CurrencyAmount","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelclosingtransaction\/blockhash","title":"var blockHash: String?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelclosingtransaction\/blockheight","title":"var blockHeight: Int64","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelclosingtransaction\/createdat","title":"var createdAt: Date","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelclosingtransaction\/destinationaddresses","title":"var destinationAddresses: [String]","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelclosingtransaction\/fees","title":"var fees: CurrencyAmount?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelclosingtransaction\/id","title":"var id: String","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelclosingtransaction\/numconfirmations","title":"var numConfirmations: Int64?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelclosingtransaction\/resolvedat","title":"var resolvedAt: Date?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelclosingtransaction\/status","title":"var status: TransactionStatus","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelclosingtransaction\/transactionhash","title":"var transactionHash: String?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelclosingtransaction\/updatedat","title":"var updatedAt: Date","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/channelclosingtransaction\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/channelclosingtransaction\/entity-implementations","title":"Entity Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/channelclosingtransaction","title":"ChannelClosingTransaction","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/channelopeningtransaction\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/channelopeningtransaction\/amount","title":"var amount: CurrencyAmount","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelopeningtransaction\/blockhash","title":"var blockHash: String?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelopeningtransaction\/blockheight","title":"var blockHeight: Int64","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelopeningtransaction\/createdat","title":"var createdAt: Date","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelopeningtransaction\/destinationaddresses","title":"var destinationAddresses: [String]","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelopeningtransaction\/fees","title":"var fees: CurrencyAmount?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelopeningtransaction\/id","title":"var id: String","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelopeningtransaction\/numconfirmations","title":"var numConfirmations: Int64?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelopeningtransaction\/resolvedat","title":"var resolvedAt: Date?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelopeningtransaction\/status","title":"var status: TransactionStatus","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelopeningtransaction\/transactionhash","title":"var transactionHash: String?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/channelopeningtransaction\/updatedat","title":"var updatedAt: Date","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/channelopeningtransaction\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/channelopeningtransaction\/entity-implementations","title":"Entity Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/channelopeningtransaction","title":"ChannelOpeningTransaction","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/createbitcoinfundingaddressoutput\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/createbitcoinfundingaddressoutput\/bitcoinaddress","title":"var bitcoinAddress: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/createbitcoinfundingaddressoutput\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/createbitcoinfundingaddressoutput","title":"CreateBitcoinFundingAddressOutput","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/createinvoiceoutput\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/createinvoiceoutput\/invoice","title":"var invoice: Invoice","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/createinvoiceoutput\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/createinvoiceoutput","title":"CreateInvoiceOutput","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/currencyamount\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/currencyamount\/originalunit","title":"var originalUnit: CurrencyUnit","type":"property"},{"path":"\/documentation\/lightsparkwallet\/currencyamount\/originalvalue","title":"var originalValue: Int64","type":"property"},{"path":"\/documentation\/lightsparkwallet\/currencyamount\/preferredcurrencyunit","title":"var preferredCurrencyUnit: CurrencyUnit","type":"property"},{"path":"\/documentation\/lightsparkwallet\/currencyamount\/preferredcurrencyvalueapprox","title":"var preferredCurrencyValueApprox: Double","type":"property"},{"path":"\/documentation\/lightsparkwallet\/currencyamount\/preferredcurrencyvaluerounded","title":"var preferredCurrencyValueRounded: Int64","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/currencyamount\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/currencyamount","title":"CurrencyAmount","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/deploywalletoutput\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/deploywalletoutput\/wallet","title":"var wallet: Wallet","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/deploywalletoutput\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/deploywalletoutput","title":"DeployWalletOutput","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/deposit\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/deposit\/amount","title":"var amount: CurrencyAmount","type":"property"},{"path":"\/documentation\/lightsparkwallet\/deposit\/blockhash","title":"var blockHash: String?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/deposit\/blockheight","title":"var blockHeight: Int64","type":"property"},{"path":"\/documentation\/lightsparkwallet\/deposit\/createdat","title":"var createdAt: Date","type":"property"},{"path":"\/documentation\/lightsparkwallet\/deposit\/destinationaddresses","title":"var destinationAddresses: [String]","type":"property"},{"path":"\/documentation\/lightsparkwallet\/deposit\/fees","title":"var fees: CurrencyAmount?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/deposit\/id","title":"var id: String","type":"property"},{"path":"\/documentation\/lightsparkwallet\/deposit\/numconfirmations","title":"var numConfirmations: Int64?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/deposit\/resolvedat","title":"var resolvedAt: Date?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/deposit\/status","title":"var status: TransactionStatus","type":"property"},{"path":"\/documentation\/lightsparkwallet\/deposit\/transactionhash","title":"var transactionHash: String?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/deposit\/updatedat","title":"var updatedAt: Date","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/deposit\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/deposit\/entity-implementations","title":"Entity Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/deposit","title":"Deposit","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/entitywrapper\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/entitywrapper\/id","title":"var id: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/entitywrapper","title":"EntityWrapper","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/feeestimate\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/feeestimate\/feefast","title":"var feeFast: CurrencyAmount","type":"property"},{"path":"\/documentation\/lightsparkwallet\/feeestimate\/feemin","title":"var feeMin: CurrencyAmount","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/feeestimate\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/feeestimate","title":"FeeEstimate","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/graphqlerror\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/graphqlerror\/extensions","title":"var extensions: GraphqlErrorExtension?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/graphqlerror\/message","title":"var message: String?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/graphqlerror\/path","title":"var path: [String]?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/graphqlerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/graphqlerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/graphqlerror","title":"GraphQLError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/graphqlerrorextension\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/graphqlerrorextension\/errorname","title":"var errorName: String?","type":"property"}],"path":"\/documentation\/lightsparkwallet\/graphqlerrorextension","title":"GraphqlErrorExtension","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/incomingpayment\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/incomingpayment\/amount","title":"var amount: CurrencyAmount","type":"property"},{"path":"\/documentation\/lightsparkwallet\/incomingpayment\/createdat","title":"var createdAt: Date","type":"property"},{"path":"\/documentation\/lightsparkwallet\/incomingpayment\/id","title":"var id: String","type":"property"},{"path":"\/documentation\/lightsparkwallet\/incomingpayment\/paymentrequest","title":"var paymentRequest: EntityWrapper?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/incomingpayment\/resolvedat","title":"var resolvedAt: Date?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/incomingpayment\/status","title":"var status: TransactionStatus","type":"property"},{"path":"\/documentation\/lightsparkwallet\/incomingpayment\/transactionhash","title":"var transactionHash: String?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/incomingpayment\/updatedat","title":"var updatedAt: Date","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/incomingpayment\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/incomingpayment\/entity-implementations","title":"Entity Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/incomingpayment","title":"IncomingPayment","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/initializewalletoutput\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/initializewalletoutput\/wallet","title":"var wallet: Wallet","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/initializewalletoutput\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/initializewalletoutput","title":"InitializeWalletOutput","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/invoice\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/invoice\/amountpaid","title":"var amountPaid: CurrencyAmount?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/invoice\/createdat","title":"var createdAt: Date","type":"property"},{"path":"\/documentation\/lightsparkwallet\/invoice\/data","title":"var data: InvoiceData","type":"property"},{"path":"\/documentation\/lightsparkwallet\/invoice\/id","title":"var id: String","type":"property"},{"path":"\/documentation\/lightsparkwallet\/invoice\/status","title":"var status: PaymentRequestStatus","type":"property"},{"path":"\/documentation\/lightsparkwallet\/invoice\/updatedat","title":"var updatedAt: Date","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/invoice\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/invoice\/entity-implementations","title":"Entity Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/invoice","title":"Invoice","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/invoicedata\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/invoicedata\/amount","title":"var amount: CurrencyAmount","type":"property"},{"path":"\/documentation\/lightsparkwallet\/invoicedata\/bitcoinnetwork","title":"var bitcoinNetwork: BitcoinNetwork","type":"property"},{"path":"\/documentation\/lightsparkwallet\/invoicedata\/createdat","title":"var createdAt: Date","type":"property"},{"path":"\/documentation\/lightsparkwallet\/invoicedata\/encodedpaymentrequest","title":"var encodedPaymentRequest: String","type":"property"},{"path":"\/documentation\/lightsparkwallet\/invoicedata\/expiresat","title":"var expiresAt: Date","type":"property"},{"path":"\/documentation\/lightsparkwallet\/invoicedata\/memo","title":"var memo: String?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/invoicedata\/paymenthash","title":"var paymentHash: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/invoicedata\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/invoicedata","title":"InvoiceData","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/lightningfeeestimateoutput\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/lightningfeeestimateoutput\/feeestimate","title":"var feeEstimate: CurrencyAmount","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/lightningfeeestimateoutput\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/lightningfeeestimateoutput","title":"LightningFeeEstimateOutput","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/loginwithjwtoutput\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/loginwithjwtoutput\/accesstoken","title":"var accessToken: String","type":"property"},{"path":"\/documentation\/lightsparkwallet\/loginwithjwtoutput\/validuntil","title":"var validUntil: Date","type":"property"},{"path":"\/documentation\/lightsparkwallet\/loginwithjwtoutput\/wallet","title":"var wallet: Wallet","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/loginwithjwtoutput\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/loginwithjwtoutput","title":"LoginWithJWTOutput","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/outgoingpayment\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/outgoingpayment\/amount","title":"var amount: CurrencyAmount","type":"property"},{"path":"\/documentation\/lightsparkwallet\/outgoingpayment\/createdat","title":"var createdAt: Date","type":"property"},{"path":"\/documentation\/lightsparkwallet\/outgoingpayment\/failuremessage","title":"var failureMessage: RichText?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/outgoingpayment\/failurereason","title":"var failureReason: PaymentFailureReason?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/outgoingpayment\/fees","title":"var fees: CurrencyAmount?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/outgoingpayment\/id","title":"var id: String","type":"property"},{"path":"\/documentation\/lightsparkwallet\/outgoingpayment\/paymentrequestdata","title":"var paymentRequestData: PaymentRequestDataEnum?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/outgoingpayment\/resolvedat","title":"var resolvedAt: Date?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/outgoingpayment\/status","title":"var status: TransactionStatus","type":"property"},{"path":"\/documentation\/lightsparkwallet\/outgoingpayment\/transactionhash","title":"var transactionHash: String?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/outgoingpayment\/updatedat","title":"var updatedAt: Date","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/outgoingpayment\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/outgoingpayment\/entity-implementations","title":"Entity Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/outgoingpayment","title":"OutgoingPayment","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/pageinfo\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/pageinfo\/endcursor","title":"var endCursor: String?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/pageinfo\/hasnextpage","title":"var hasNextPage: Bool?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/pageinfo\/haspreviouspage","title":"var hasPreviousPage: Bool?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/pageinfo\/startcursor","title":"var startCursor: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/pageinfo\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/pageinfo","title":"PageInfo","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/payinvoiceoutput\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/payinvoiceoutput\/payment","title":"var payment: OutgoingPayment","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/payinvoiceoutput\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/payinvoiceoutput","title":"PayInvoiceOutput","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/requestwithdrawaloutput\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/requestwithdrawaloutput\/request","title":"var request: WithdrawalRequest","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/requestwithdrawaloutput\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/requestwithdrawaloutput","title":"RequestWithdrawalOutput","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/richtext\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/richtext\/text","title":"var text: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/richtext\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/richtext","title":"RichText","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/sendpaymentoutput\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/sendpaymentoutput\/payment","title":"var payment: OutgoingPayment","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/sendpaymentoutput\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/sendpaymentoutput","title":"SendPaymentOutput","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/terminatewalletoutput\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/terminatewalletoutput\/wallet","title":"var wallet: Wallet","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/terminatewalletoutput\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/terminatewalletoutput","title":"TerminateWalletOutput","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/wallet\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/wallet\/balances","title":"var balances: Balances?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/wallet\/createdat","title":"var createdAt: Date","type":"property"},{"path":"\/documentation\/lightsparkwallet\/wallet\/id","title":"var id: String","type":"property"},{"path":"\/documentation\/lightsparkwallet\/wallet\/status","title":"var status: WalletStatus","type":"property"},{"path":"\/documentation\/lightsparkwallet\/wallet\/updatedat","title":"var updatedAt: Date","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/wallet\/paymentrequestsquery","title":"static let paymentRequestsQuery: String","type":"property"},{"path":"\/documentation\/lightsparkwallet\/wallet\/transactionsquery","title":"static let transactionsQuery: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/wallet\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/wallet\/entity-implementations","title":"Entity Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/wallet","title":"Wallet","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/wallettopaymentrequestsconnection\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/wallettopaymentrequestsconnection\/count","title":"var count: Int64","type":"property"},{"path":"\/documentation\/lightsparkwallet\/wallettopaymentrequestsconnection\/entities","title":"var entities: [PaymentRequestEnum]","type":"property"},{"path":"\/documentation\/lightsparkwallet\/wallettopaymentrequestsconnection\/pageinfo","title":"var pageInfo: PageInfo","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/wallettopaymentrequestsconnection\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/wallettopaymentrequestsconnection","title":"WalletToPaymentRequestsConnection","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/wallettotransactionsconnection\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/wallettotransactionsconnection\/count","title":"var count: Int64","type":"property"},{"path":"\/documentation\/lightsparkwallet\/wallettotransactionsconnection\/entities","title":"var entities: [TransactionEnum]","type":"property"},{"path":"\/documentation\/lightsparkwallet\/wallettotransactionsconnection\/pageinfo","title":"var pageInfo: PageInfo","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/wallettotransactionsconnection\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/wallettotransactionsconnection","title":"WalletToTransactionsConnection","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/withdrawal\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/withdrawal\/amount","title":"var amount: CurrencyAmount","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawal\/blockhash","title":"var blockHash: String?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawal\/blockheight","title":"var blockHeight: Int64","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawal\/createdat","title":"var createdAt: Date","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawal\/destinationaddresses","title":"var destinationAddresses: [String]","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawal\/fees","title":"var fees: CurrencyAmount?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawal\/id","title":"var id: String","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawal\/numconfirmations","title":"var numConfirmations: Int64?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawal\/resolvedat","title":"var resolvedAt: Date?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawal\/status","title":"var status: TransactionStatus","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawal\/transactionhash","title":"var transactionHash: String?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawal\/updatedat","title":"var updatedAt: Date","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/withdrawal\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/withdrawal\/entity-implementations","title":"Entity Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/withdrawal","title":"Withdrawal","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequest\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequest\/amount","title":"var amount: CurrencyAmount","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequest\/bitcoinaddress","title":"var bitcoinAddress: String","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequest\/completedat","title":"var completedAt: Date?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequest\/createdat","title":"var createdAt: Date","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequest\/estimatedamount","title":"var estimatedAmount: CurrencyAmount?","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequest\/id","title":"var id: String","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequest\/status","title":"var status: WithdrawalRequestStatus","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequest\/updatedat","title":"var updatedAt: Date","type":"property"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequest\/withdrawal","title":"var withdrawal: EntityWrapper?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequest\/fragment","title":"static let fragment: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/withdrawalrequest\/entity-implementations","title":"Entity Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/withdrawalrequest","title":"WithdrawalRequest","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/bitcoinnetwork\/mainnet","title":"case mainnet","type":"case"},{"path":"\/documentation\/lightsparkwallet\/bitcoinnetwork\/regtest","title":"case regtest","type":"case"},{"path":"\/documentation\/lightsparkwallet\/bitcoinnetwork\/signet","title":"case signet","type":"case"},{"path":"\/documentation\/lightsparkwallet\/bitcoinnetwork\/testnet","title":"case testnet","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/bitcoinnetwork\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/bitcoinnetwork\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lightsparkwallet\/bitcoinnetwork\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/bitcoinnetwork\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/bitcoinnetwork\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/bitcoinnetwork\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lightsparkwallet\/bitcoinnetwork\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/bitcoinnetwork","title":"BitcoinNetwork","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/currencyunit\/bitcoin","title":"case bitcoin","type":"case"},{"path":"\/documentation\/lightsparkwallet\/currencyunit\/microbitcoin","title":"case microbitcoin","type":"case"},{"path":"\/documentation\/lightsparkwallet\/currencyunit\/millibitcoin","title":"case millibitcoin","type":"case"},{"path":"\/documentation\/lightsparkwallet\/currencyunit\/millisatoshi","title":"case millisatoshi","type":"case"},{"path":"\/documentation\/lightsparkwallet\/currencyunit\/nanobitcoin","title":"case nanobitcoin","type":"case"},{"path":"\/documentation\/lightsparkwallet\/currencyunit\/satoshi","title":"case satoshi","type":"case"},{"path":"\/documentation\/lightsparkwallet\/currencyunit\/usd","title":"case usd","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/currencyunit\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/currencyunit\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lightsparkwallet\/currencyunit\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/currencyunit\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/currencyunit\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/currencyunit\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lightsparkwallet\/currencyunit\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/currencyunit","title":"CurrencyUnit","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/entityenum\/channelclosingtransaction(_:)","title":"case channelClosingTransaction(ChannelClosingTransaction)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/entityenum\/channelopeningtransaction(_:)","title":"case channelOpeningTransaction(ChannelOpeningTransaction)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/entityenum\/deposit(_:)","title":"case deposit(Deposit)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/entityenum\/incomingpayment(_:)","title":"case incomingPayment(IncomingPayment)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/entityenum\/invoice(_:)","title":"case invoice(Invoice)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/entityenum\/outgoingpayment(_:)","title":"case outgoingPayment(OutgoingPayment)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/entityenum\/wallet(_:)","title":"case wallet(Wallet)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/entityenum\/withdrawal(_:)","title":"case withdrawal(Withdrawal)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/entityenum\/withdrawalrequest(_:)","title":"case withdrawalRequest(WithdrawalRequest)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/entityenum\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/lightsparkwallet\/entityenum\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/entityenum","title":"EntityEnum","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/invoicetype\/amp","title":"case amp","type":"case"},{"path":"\/documentation\/lightsparkwallet\/invoicetype\/standard","title":"case standard","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/invoicetype\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/invoicetype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lightsparkwallet\/invoicetype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/invoicetype\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/invoicetype\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/invoicetype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lightsparkwallet\/invoicetype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/invoicetype","title":"InvoiceType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/keytype\/rsaoaep","title":"case rsaOaep","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/keytype\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/keytype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lightsparkwallet\/keytype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/keytype\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/keytype\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/keytype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lightsparkwallet\/keytype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/keytype","title":"KeyType","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/keys\/base64stringrepresentationforpublickey(publickey:)","title":"static func base64StringRepresentationForPublicKey(publicKey: SecKey) throws -> String","type":"method"},{"path":"\/documentation\/lightsparkwallet\/keys\/generatenewrsasigningkeypair(tag:permanent:)","title":"static func generateNewRSASigningKeyPair(tag: String?, permanent: Bool) throws -> (SecKey, SecKey)","type":"method"},{"path":"\/documentation\/lightsparkwallet\/keys\/getrsaprivatekey(tag:)","title":"static func getRSAPrivateKey(tag: String) -> SecKey?","type":"method"},{"path":"\/documentation\/lightsparkwallet\/keys\/removersaprivatekey(tag:)","title":"static func removeRSAPrivateKey(tag: String) throws","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/keys\/keyserror\/generatekeyfailure","title":"case generateKeyFailure","type":"case"},{"path":"\/documentation\/lightsparkwallet\/keys\/keyserror\/keyalreadyexisterror","title":"case keyAlreadyExistError","type":"case"},{"path":"\/documentation\/lightsparkwallet\/keys\/keyserror\/keynotfounderror","title":"case keyNotFoundError","type":"case"},{"path":"\/documentation\/lightsparkwallet\/keys\/keyserror\/publickeynotcopiableerror","title":"case publicKeyNotCopiableError","type":"case"},{"path":"\/documentation\/lightsparkwallet\/keys\/keyserror\/tagparsingerror","title":"case tagParsingError","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/keys\/keyserror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lightsparkwallet\/keys\/keyserror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/keys\/keyserror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/keys\/keyserror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/keys\/keyserror","title":"Keys.KeysError","type":"enum"}],"path":"\/documentation\/lightsparkwallet\/keys","title":"Keys","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/lightningtransactionenum\/incomingpayment(_:)","title":"case incomingPayment(IncomingPayment)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/lightningtransactionenum\/outgoingpayment(_:)","title":"case outgoingPayment(OutgoingPayment)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/lightningtransactionenum\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/lightsparkwallet\/lightningtransactionenum\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/lightningtransactionenum","title":"LightningTransactionEnum","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/onchaintransactionenum\/channelclosingtransaction(_:)","title":"case channelClosingTransaction(ChannelClosingTransaction)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/onchaintransactionenum\/channelopeningtransaction(_:)","title":"case channelOpeningTransaction(ChannelOpeningTransaction)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/onchaintransactionenum\/deposit(_:)","title":"case deposit(Deposit)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/onchaintransactionenum\/withdrawal(_:)","title":"case withdrawal(Withdrawal)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/onchaintransactionenum\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/lightsparkwallet\/onchaintransactionenum\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/onchaintransactionenum","title":"OnChainTransactionEnum","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentfailurereason\/error","title":"case error","type":"case"},{"path":"\/documentation\/lightsparkwallet\/paymentfailurereason\/incorrectpaymentdetails","title":"case incorrectPaymentDetails","type":"case"},{"path":"\/documentation\/lightsparkwallet\/paymentfailurereason\/insufficientbalance","title":"case insufficientBalance","type":"case"},{"path":"\/documentation\/lightsparkwallet\/paymentfailurereason\/invoicealreadypaid","title":"case invoiceAlreadyPaid","type":"case"},{"path":"\/documentation\/lightsparkwallet\/paymentfailurereason\/invoiceexpired","title":"case invoiceExpired","type":"case"},{"path":"\/documentation\/lightsparkwallet\/paymentfailurereason\/noroute","title":"case noRoute","type":"case"},{"path":"\/documentation\/lightsparkwallet\/paymentfailurereason\/none","title":"case none","type":"case"},{"path":"\/documentation\/lightsparkwallet\/paymentfailurereason\/selfpayment","title":"case selfPayment","type":"case"},{"path":"\/documentation\/lightsparkwallet\/paymentfailurereason\/timeout","title":"case timeout","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentfailurereason\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentfailurereason\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lightsparkwallet\/paymentfailurereason\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentfailurereason\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentfailurereason\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentfailurereason\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lightsparkwallet\/paymentfailurereason\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/paymentfailurereason","title":"PaymentFailureReason","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentrequestdataenum\/invoicedata(_:)","title":"case invoiceData(InvoiceData)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentrequestdataenum\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/lightsparkwallet\/paymentrequestdataenum\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/paymentrequestdataenum","title":"PaymentRequestDataEnum","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentrequestenum\/invoice(_:)","title":"case invoice(Invoice)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentrequestenum\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/lightsparkwallet\/paymentrequestenum\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/paymentrequestenum","title":"PaymentRequestEnum","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentrequeststatus\/closed","title":"case closed","type":"case"},{"path":"\/documentation\/lightsparkwallet\/paymentrequeststatus\/open","title":"case open","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentrequeststatus\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentrequeststatus\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lightsparkwallet\/paymentrequeststatus\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentrequeststatus\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentrequeststatus\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/paymentrequeststatus\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lightsparkwallet\/paymentrequeststatus\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/paymentrequeststatus","title":"PaymentRequestStatus","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/signing\/signpayload(key:payload:)","title":"static func signPayload(key: SecKey, payload: Data) throws -> String","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/signing\/signingerror\/jsonserializationerror","title":"case jsonSerializationError","type":"case"},{"path":"\/documentation\/lightsparkwallet\/signing\/signingerror\/keynotsupported","title":"case keyNotSupported","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/signing\/signingerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lightsparkwallet\/signing\/signingerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/signing\/signingerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/signing\/signingerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/signing\/signingerror","title":"Signing.SigningError","type":"enum"}],"path":"\/documentation\/lightsparkwallet\/signing","title":"Signing","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactionenum\/channelclosingtransaction(_:)","title":"case channelClosingTransaction(ChannelClosingTransaction)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactionenum\/channelopeningtransaction(_:)","title":"case channelOpeningTransaction(ChannelOpeningTransaction)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactionenum\/deposit(_:)","title":"case deposit(Deposit)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactionenum\/incomingpayment(_:)","title":"case incomingPayment(IncomingPayment)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactionenum\/outgoingpayment(_:)","title":"case outgoingPayment(OutgoingPayment)","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactionenum\/withdrawal(_:)","title":"case withdrawal(Withdrawal)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactionenum\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/lightsparkwallet\/transactionenum\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/transactionenum","title":"TransactionEnum","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactionstatus\/cancelled","title":"case cancelled","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactionstatus\/expired","title":"case expired","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactionstatus\/failed","title":"case failed","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactionstatus\/notstarted","title":"case notStarted","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactionstatus\/pending","title":"case pending","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactionstatus\/success","title":"case success","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactionstatus\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactionstatus\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lightsparkwallet\/transactionstatus\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactionstatus\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactionstatus\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactionstatus\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lightsparkwallet\/transactionstatus\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/transactionstatus","title":"TransactionStatus","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactiontype\/channelclose","title":"case channelClose","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactiontype\/channelopen","title":"case channelOpen","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactiontype\/incomingpayment","title":"case incomingPayment","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactiontype\/l1deposit","title":"case l1Deposit","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactiontype\/l1withdraw","title":"case l1Withdraw","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactiontype\/outgoingpayment","title":"case outgoingPayment","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactiontype\/payment","title":"case payment","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactiontype\/paymentrequest","title":"case paymentRequest","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactiontype\/route","title":"case route","type":"case"},{"path":"\/documentation\/lightsparkwallet\/transactiontype\/routed","title":"case routed","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactiontype\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactiontype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lightsparkwallet\/transactiontype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactiontype\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactiontype\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/transactiontype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lightsparkwallet\/transactiontype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/transactiontype","title":"TransactionType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/urlrequestbuildererror\/baseurlstringerror","title":"case baseURLStringError","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/urlrequestbuildererror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lightsparkwallet\/urlrequestbuildererror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/urlrequestbuildererror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/urlrequestbuildererror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/urlrequestbuildererror","title":"URLRequestBuilderError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/walletclienterror\/emptydataerror","title":"case emptyDataError","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/walletclienterror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lightsparkwallet\/walletclienterror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/walletclienterror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lightsparkwallet\/walletclienterror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/walletclienterror","title":"WalletClientError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/walletstatus\/deployed","title":"case deployed","type":"case"},{"path":"\/documentation\/lightsparkwallet\/walletstatus\/deploying","title":"case deploying","type":"case"},{"path":"\/documentation\/lightsparkwallet\/walletstatus\/failed","title":"case failed","type":"case"},{"path":"\/documentation\/lightsparkwallet\/walletstatus\/initializing","title":"case initializing","type":"case"},{"path":"\/documentation\/lightsparkwallet\/walletstatus\/notsetup","title":"case notSetup","type":"case"},{"path":"\/documentation\/lightsparkwallet\/walletstatus\/ready","title":"case ready","type":"case"},{"path":"\/documentation\/lightsparkwallet\/walletstatus\/terminated","title":"case terminated","type":"case"},{"path":"\/documentation\/lightsparkwallet\/walletstatus\/terminating","title":"case terminating","type":"case"},{"path":"\/documentation\/lightsparkwallet\/walletstatus\/unavailable","title":"case unavailable","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/walletstatus\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/walletstatus\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lightsparkwallet\/walletstatus\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/walletstatus\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/walletstatus\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/walletstatus\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lightsparkwallet\/walletstatus\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/walletstatus","title":"WalletStatus","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequeststatus\/failed","title":"case failed","type":"case"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequeststatus\/inprogress","title":"case inProgress","type":"case"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequeststatus\/successful","title":"case successful","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequeststatus\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequeststatus\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lightsparkwallet\/withdrawalrequeststatus\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequeststatus\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequeststatus\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lightsparkwallet\/withdrawalrequeststatus\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lightsparkwallet\/withdrawalrequeststatus\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/lightsparkwallet\/withdrawalrequeststatus","title":"WithdrawalRequestStatus","type":"enum"}],"path":"\/documentation\/lightsparkwallet","title":"LightsparkWallet","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}